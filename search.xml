<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何用Three.js和Echarts绘制世界地图</title>
      <link href="/2019/12/24/ru-he-yong-three.js-he-echarts-hui-zhi-shi-jie-di-tu/"/>
      <url>/2019/12/24/ru-he-yong-three.js-he-echarts-hui-zhi-shi-jie-di-tu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>前不久参与了公司的客户大会项目中，其中就有一个需求是要绘制一副关于北京市怀柔区的地图，和本篇文章所用的例子虽不同，但是开发过程都是一样的。在项目中，我用的是Echarts图表库进行开发，最后实现的效果算是满意。因为Echarts详细的文档，丰富的API，和良好的社区环境，易于上手等优点，让我在客户大会开发过程中因需求紧，开发周期短对窘境下，依然可以完成对地图的开发。</p><p>Echarts底层依赖矢量图形库ZRender ，ZRender它提供Canvas,SVG,VML等多种渲染方式，因此Echarts就可以提供直观，交互丰富，可高度个性化定制的数据可视化图表。因为ZRender是一个二维引擎，所以Echarts实现三维图表就要引入基于WebGL的Echarts GL js库，这样就可以跟使用 ECharts 普通组件一样轻松的使用 ECharts GL 绘制出三维的地球，建筑群，人口分布的柱状图等三维图表！</p><p>上文中可以得知Echarts要实现三维效果需要额外引入基于三维渲染引擎的js库，那么有没有是不需要额外引入其他js库的就可以实现3D效果的可视化库呢？答案是肯定的！这个可视化库就是Three.js。</p><p>之前在工作群中有看到部门总监提出让开发学习如何绘制“3D汽车模型”,同时Three.js可以实现[物联网3D可视化]（<a href="http://www.yanhuangxueyuan.com/3D/liangcang/index.html）、[产品720在线预览]（http://app.xuanke3d.com/apps/trayton/#/show）、[数据可视化]（http://www.yanhuangxueyuan.com/3D/geojsonChina/index.html）、[WebVR](http://www.yanhuangxueyuan.com/3D/houseDesign/index.html)等场景功能。这让身处用户体验部可视化小组的我慢慢的产生了学习Three.js的兴趣。" target="_blank" rel="noopener">http://www.yanhuangxueyuan.com/3D/liangcang/index.html）、[产品720在线预览]（http://app.xuanke3d.com/apps/trayton/#/show）、[数据可视化]（http://www.yanhuangxueyuan.com/3D/geojsonChina/index.html）、[WebVR](http://www.yanhuangxueyuan.com/3D/houseDesign/index.html)等场景功能。这让身处用户体验部可视化小组的我慢慢的产生了学习Three.js的兴趣。</a></p><h3 id="认识Three-js"><a href="#认识Three-js" class="headerlink" title="认识Three.js"></a>认识Three.js</h3><p>WebGL是在浏览器中实现三维效果的一套规范，而最初使用WebGL原生的API来写3D程序是一件非常痛苦的事情，所以就有了非常优秀的WebGl开源框架three.js的出现。</p><p>Three.js可以这样理解：Three表示3D的意思，js表示JavaScript的意思。那么合起来，就是使用JavaScript来写3D程序的意思。</p><p>如果我们需要使用Three.js来绘图，只需要创建一个最小的绘图环境即可。Threejs在底层其实还是调用html5中的canvas api来实现绘图的。但和我们一般绘制2D图像不同，Threejs在底层使用的是canvas的webgl context来实现3D 绘图。webgl context本身更多是直接对GPU的操作，用起来相当不直观，为此Three.js在顶层对3D绘图所需的各种元素进行封装。</p><h3 id="Three-js三大组件"><a href="#Three-js三大组件" class="headerlink" title="Three.js三大组件"></a>Three.js三大组件</h3><ol><li>场景（Scene)： 场景是用来容纳图形元素，包含所有需要显示的3D物体以及其他相关元素的容器。</li><li>相机（Camera）：相机的作用是决定3D场景如何投影到2D画布之上，定义可视区域，确定哪些图形元素是可见的。</li><li>渲染器（Renderer）：渲染器则负责用如何渲染出图像，是使用WebGL还是Canvas,用于最后绘制的画笔。</li></ol><h4 id="场景Scene"><a href="#场景Scene" class="headerlink" title="场景Scene"></a>场景Scene</h4><p>在Threejs中场景就只有一种，用THREE.Scene来表示，要构件一个场景也很简单，只要new一个对象就可以了。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Scene</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="相机Camera"><a href="#相机Camera" class="headerlink" title="相机Camera"></a>相机Camera</h4><p>相机决定了场景中那个角度的景色会显示出来。场景只有一种，但是相机却有很多种。和生活中的相机不同，Threejs中的相机只要设置不同的相机参数，就能够产生不一样的效果。</p><p>定义一个相机的代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> camera <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>PerspectiveCamera</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">,</span>window<span class="token punctuation">.</span>innerWidth<span class="token operator">/</span>window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></code></pre><blockquote><p>three.js有几种相机，这里使用的是PerspectiveCamera(透视摄像机)。第一个参数是视野角度（Fov）,视野角度 就是无论在什么时候，所能在显示器上看到的场景的范围，它的值是角度单位。第二个参数是长宽比。接下来两个参数是近截面（near)和远截面（far)。当物体某些部分比摄像机当远截面远或者比近截面近的时候，将这些部分不渲染到场景中。</p></blockquote><h4 id="渲染器Renderer"><a href="#渲染器Renderer" class="headerlink" title="渲染器Renderer"></a>渲染器Renderer</h4><p>渲染器决定了渲染的结果应该画在页面的什么元素上面，并且以怎样的方式来绘制。定义一个WebRenderer渲染器：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> renderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>WebGLRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>renderer<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span>window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>renderer<span class="token punctuation">.</span>domElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>除了创建一个渲染器的实例之外，我们还需要在我们的应用程序里设置一个渲染器的尺寸。比如说，我们可以使用所需要的渲染区域的宽高，来让渲染器渲染出的场景填充满我们的应用程序。因此，我们可以将渲染器宽高设置为浏览器窗口宽高。对于性能比较敏感的应用程序来说，你可以使用setSize传入一个较小的值，例如window.innerWidth/2和window.innerHeight/2，这将使得应用程序在渲染时，以一半的长宽尺寸渲染场景。<br>渲染器renderer的domElement元素，表示渲染器中画布，所有的渲染都画在domElement上的，所以这里的appendChild表示将这个domElement挂载在body下面，这样渲染的结果就能够在页面中显示出来。</p></blockquote><h3 id="通过例子来深入讲解"><a href="#通过例子来深入讲解" class="headerlink" title="通过例子来深入讲解"></a>通过例子来深入讲解</h3><iframe height="265" style="width: 100%;" scrolling="no" title="gObGYyr" src="https://codepen.io/Eddie-Fannie/embed/gObGYyr?height=265&amp;theme-id=default&amp;default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/Eddie-Fannie/pen/gObGYyr' target="_blank" rel="noopener">gObGYyr</a> by ljh  (<a href='https://codepen.io/Eddie-Fannie' target="_blank" rel="noopener">@Eddie-Fannie</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.</iframe><p>接下来对上述例子进行详细解析：</p><ol><li><p>如何获得three.min.js文件</p><blockquote><ul><li>git clone <a href="https://github.com/mrdoob/three.js.git" target="_blank" rel="noopener">https://github.com/mrdoob/three.js.git</a> </li><li>cd ./three.js</li><li>npm install</li><li>npm run build<br>该文件就在three.js/build/three.min.js下</li></ul></blockquote></li><li><p>部分代码分析</p></li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> geometry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>BoxGeometry</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> material <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>MeshBasicMaterial</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token number">0x00ff00</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> cube <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Mesh</span><span class="token punctuation">(</span> geometry<span class="token punctuation">,</span> material <span class="token punctuation">)</span><span class="token punctuation">;</span>scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> cube <span class="token punctuation">)</span><span class="token punctuation">;</span>camera<span class="token punctuation">.</span>position<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></code></pre><blockquote><ol><li>要创建一个立方体，我们需要一个BoxGeometry（立方体）对象，这个对象包含了一个立方体中所有的顶点（vertices）和面（faces）。</li><li>对于这个立方体，需要给它一个材质让它有颜色。MeshBasicMaterial就是自带的几种材质之一，这里只简单设置了一个颜色属性。</li><li>需要一个Mesh（网格），网格包含一个几何体以及作用在此几何体上的材质，然后将网格对象放入到我们到场景中，并让它在场景中自由移动。</li><li>默认情况下，当我们调用scene.add()的时候，物体将会被添加到（0，0，0)坐标，但将使得摄像机和立方体彼此在一起。为了防止这种情况发生，就需要将摄像机稍微向外移动一点距离，这里是5。</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> animate <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span> animate <span class="token punctuation">)</span><span class="token punctuation">;</span>    renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> scene<span class="token punctuation">,</span> camera <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>如果将前面的代码复制到HTML文件中页面是不会看到任何东西。这是因为没有对它进行真正到渲染。我们还需要一个叫做“渲染循环”（render loop)或者“动画循环”（animate loop)的东西。在这里我们创建了一个使渲染器能够在每次屏幕刷新时对场景进行绘制对循环，这里不用setInterval而用requestAnimationFrame最重要对一点或许是当用户切换到其他标签页时，会暂停，因此不会浪费用户处理器资源和损耗电池寿命。</p></blockquote><pre class=" language-javascript"><code class="language-javascript">cube<span class="token punctuation">.</span>rotation<span class="token punctuation">.</span>x <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">;</span>cube<span class="token punctuation">.</span>rotation<span class="token punctuation">.</span>y <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">;</span></code></pre><blockquote><p>进行真正的渲染后，可以看到是一个绿色的方块。而上面的代码就是让它旋转起来。这段代码每帧都会执行（正常情况下是60次/秒），这就让立方体有一个看起来很不错的旋转动画。</p></blockquote><h3 id="用Three-js制作一个世界地图"><a href="#用Three-js制作一个世界地图" class="headerlink" title="用Three.js制作一个世界地图"></a>用Three.js制作一个世界地图</h3><p>Three.js可以实现3D效果，同样也可以实现2D效果，只需要把一些组件参数进行配置完好就行。</p><h5 id="在线编辑例子"><a href="#在线编辑例子" class="headerlink" title="在线编辑例子"></a>在线编辑例子</h5><iframe height="211" style="width: 100%;" scrolling="no" title="XWJaQxM" src="https://codepen.io/Eddie-Fannie/embed/XWJaQxM?height=211&amp;theme-id=default&amp;default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/Eddie-Fannie/pen/XWJaQxM' target="_blank" rel="noopener">XWJaQxM</a> by ljh  (<a href='https://codepen.io/Eddie-Fannie' target="_blank" rel="noopener">@Eddie-Fannie</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.</iframe><p>关于Three.js的其他技巧学习可以参考官方文档：<a href="http://www.webgl3d.cn/Three.js/" target="_blank" rel="noopener">Three.js</a></p><h3 id="用Echarts绘制世界地图"><a href="#用Echarts绘制世界地图" class="headerlink" title="用Echarts绘制世界地图"></a>用Echarts绘制世界地图</h3><p>上述我们用Three.js实现了一个二维可以通过鼠标进行缩放的世界地图，接下来我们用Echarts同样实现一个世界地图。</p><iframe height="265" style="width: 100%;" scrolling="no" title="gObRzzJ" src="https://codepen.io/Eddie-Fannie/embed/gObRzzJ?height=265&amp;theme-id=default&amp;default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/Eddie-Fannie/pen/gObRzzJ' target="_blank" rel="noopener">gObRzzJ</a> by ljh  (<a href='https://codepen.io/Eddie-Fannie' target="_blank" rel="noopener">@Eddie-Fannie</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.</iframe><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Echarts 是一个基于JS的数据可视化的图表工具。可将数据以地图、直方图、折线图、点状图、饼状图等方式展现出来，并且效果非常炫酷。Three.js更倾向于制作3D方面的效果，如之前很火的微信小程序游戏-跳一跳就是用Three.js开发的。在前面所提及的世界地图的例子中，用Three.js开发入门略微复杂，要对Three.js文档有一定对熟悉程度；用Echarts就无需对文档过于熟悉，只需要对某个图表对配置项进行学习进行配置就好。比如我们需求是要绘制一个饼图，那么我们就只需要在官方文档找到饼图对配置信息进行学习并完成配置，配置信息也是通俗易懂。所以我们平时做可视化前端需求对时候，如果需求开发周期过于短，我们可以考虑易上手对Echarts；如果开发周期长且需要高度定制化的图表，我们可以好好研究一下Three.js,并用以完成开发。</p><p>写这篇文章并非要揪出一个可视化图库的好坏，存在即合理。纯粹作为一个开发者，想让自身技术得以提升，毕竟兴趣是最好的老师，入门了一下Three.js让我有很浓厚的兴致继续学习下去。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> three.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> three.js </tag>
            
            <tag> webGL </tag>
            
            <tag> echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>细谈js的this问题</title>
      <link href="/2019/12/05/xi-tan-js-de-this-wen-ti/"/>
      <url>/2019/12/05/xi-tan-js-de-this-wen-ti/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="关于this对象"><a href="#关于this对象" class="headerlink" title="关于this对象"></a>关于this对象</h3><p>在《JavaScript高级程序设计》一书中说明了this对象是运行时基于函数的执行环境绑定的：在全局函数中，this等于window，而当函数被作为某个对象的方法调用时，this等于那个对象。</p><p>不过，匿名函数的执行环境具有全局性，因此其this对象通常指向window。</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'lin jia heng'</span>    <span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'My Object'</span><span class="token punctuation">,</span>        getNameFunc<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//匿名函数的执行环境具有全局性，所以this指向window</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">alert</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// lin jia heng(非严格模式）</span></code></pre><p>而下面的例子就可以成功返回“My Object”</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'lin jia heng'</span>    <span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'My Object'</span><span class="token punctuation">,</span>        getNameFunc<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当函数被作为某个对象的方法调用时，this等于那个对象</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">alert</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// My Object</span></code></pre><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'lin jia heng'</span>    <span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'My Object'</span><span class="token punctuation">,</span>        getNameFunc<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">// 改变this指向</span>            <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> that<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//匿名函数的执行环境具有全局性，所以this指向window</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">alert</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// My Object</span></code></pre><h3 id="在函数中执行"><a href="#在函数中执行" class="headerlink" title="在函数中执行"></a>在函数中执行</h3><ol><li>在非严格模式（默认绑定）<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Window</span></code></pre></li><li>在严格模式（默认绑定）<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//undefined</span></code></pre>这就验证了第一个例子中为什么特意表明在非严格模式下才成立了。</li></ol><h3 id="作为一个构造函数使用"><a href="#作为一个构造函数使用" class="headerlink" title="作为一个构造函数使用"></a>作为一个构造函数使用</h3><p>在JS中，为了实现类我们需要定义一些构造函数，在调用一个构造函数的时候加上new这个关键字：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'kk'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Person</span></code></pre><p>此时this指向这个构造函数调用的时候实例化出来的对象</p><p>当然，构造函数其实也是一个函数，如果将构造函数当成普通函数来调用，this指向Window</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">'kk'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Window</span></code></pre><h3 id="在定时器中使用"><a href="#在定时器中使用" class="headerlink" title="在定时器中使用"></a>在定时器中使用</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Window，setInterval也一样</span></code></pre><p>如果没有特殊指向，定时器的回调函数中this的指向都是Window。这是因为JS的定时器方法是定义在Window下的。</p><h3 id="在箭头函数中使用"><a href="#在箭头函数中使用" class="headerlink" title="在箭头函数中使用"></a>在箭头函数中使用</h3><ol><li>在全局环境中使用：<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Window</span></code></pre></li><li>作为一个对象的一个函数使用：（隐式绑定）<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'hh'</span><span class="token punctuation">,</span> func<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//obj</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'hh'</span><span class="token punctuation">,</span> func<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Window</span></code></pre></li><li>作为对象的特殊情况，结合定时器来使用：<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'hh'</span><span class="token punctuation">,</span> func<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Window</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'hh'</span><span class="token punctuation">,</span> func<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// obj</span></code></pre><blockquote><p>箭头函数中的this的值取决于该函数外部非箭头函数的this的值，否则this的值会被设置为全局对象Window,且不能通过call(),apply()和bind()方法来改变this的值。–《深入理解ES6》</p></blockquote></li></ol><h3 id="赋值给另外一个变量进行调用"><a href="#赋值给另外一个变量进行调用" class="headerlink" title="赋值给另外一个变量进行调用"></a>赋值给另外一个变量进行调用</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    fn<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//windowsName</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> f <span class="token operator">=</span> a<span class="token punctuation">.</span>fn<span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>fn()最后仍然是被window调用的，所以this指向的也是window。this的指向并不是在创建的时候就确定并一成不变的，在es5this永远指向最后调用它的那个对象</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span> <span class="token comment" spellcheck="true">//严格模式下</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'John'</span><span class="token punctuation">,</span>    <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">bye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Bye'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//John</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'John'</span> <span class="token operator">?</span> user<span class="token punctuation">.</span>hi <span class="token punctuation">:</span> user<span class="token punctuation">.</span>bye<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// this指向undefined,所以此处报错，此处的函数user.hi没有加上括号进行立即执行，有点类似于上个例子的赋值变量进行调用</span></code></pre><h3 id="改变this的指向"><a href="#改变this的指向" class="headerlink" title="改变this的指向"></a>改变this的指向</h3><ul><li>像上述部分例子一样使用箭头函数</li><li>在函数内部定义一个变量_this = this</li><li>使用apply，call，bind（显示绑定）</li><li>new实例化一个对象（new绑定）</li></ul><h4 id="使用-this-this"><a href="#使用-this-this" class="headerlink" title="使用_this = this"></a>使用_this = this</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>    name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>    func1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    func2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            _this<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// Cherry</span></code></pre><blockquote><p>在 func2 中，首先设置 var _this = this;，这里的 this 是调用 func2 的对象 a，为了防止在 func2 中的 setTimeout 被 window 调用而导致的在 setTimeout 中的 this 为 window。我们将 this(指向变量 a) 赋值给一个变量 _this，这样，在 func2 中我们使用 _this 就是指向对象 a 了。</p></blockquote><h4 id="使用apply，call，bind（显示绑定）"><a href="#使用apply，call，bind（显示绑定）" class="headerlink" title="使用apply，call，bind（显示绑定）"></a>使用apply，call，bind（显示绑定）</h4><h5 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h5><blockquote><p>如果你想将某个函数绑定新的this指向并且固定传入几个变量可以在绑定的时候就传入，之后调用新函数传入的参数都会排在后面</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> obj<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true, 因为bind方法把this指向了obj对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> newFn <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'lin'</span><span class="token punctuation">,</span> <span class="token string">'jiaheng'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//因为bind返回一个新函数，所以要赋值给一个新变量</span><span class="token function">newFn</span><span class="token punctuation">(</span><span class="token string">'jiahenglin'</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span><span class="token punctuation">{</span>    name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>    fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">// 3</span></code></pre><p><strong>因为bind返回一个新函数，所以要加多一个括号手动调用它</strong></p><h5 id="call"><a href="#call" class="headerlink" title="call"></a>call</h5><blockquote><p>需要注意的是，指定的this并不一定是该函数执行时真正的this，如果这个函数处于非严格模式下，则指定为null和undefined的this值会自动指向全局对象（window），同时值为原始值（数学，字符串，布尔值）的this会指向该原始值的自动包装对象【理解为<br>如果你传入一个原始值（字符串，布尔类型或者数字类型）来当作this的绑定对象，这个原始值就会被转换成它的对象形式（也就是new String(…),new Boolean(…)或者new Number(…),这通常称为装箱】。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>    name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>    func1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    func2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 没用利用call改变this的指向的话，这里的this就是Window</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Cherry</span></code></pre><h5 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h5><blockquote><p>第一个参数和call的一样，第二个参数一定是传入一个数组格式的,最终调用函数时候这个数组会拆成一个一个参数传入</p></blockquote><p><strong>因为apply函数传参的特性，所以可以实现一个全是数字的数组找出最大最小值的效果</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token keyword">const</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//45</span><span class="token comment" spellcheck="true">// 也可以使用ES6的拓展运算符</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="bind-call-apply进阶例子"><a href="#bind-call-apply进阶例子" class="headerlink" title="bind,call,apply进阶例子"></a>bind,call,apply进阶例子</h4><ol><li>循环中利用闭包来处理回调<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><blockquote><p>每次循环都会产生一个立即执行的函数，函数内部的局部变量j保存不同时期i的值，循环过程中，<br>setTimeout回调按顺序放入事件队列中，等for循环结束后，堆栈中没用同步的代码，就去事件队列中，执行对应的回调，打印出j的值</p></blockquote></li></ol><p>同理可以利用bind，每次都创建新的函数，并且已经预先设置了参数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>实现继承<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Person <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> P1 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//借用构造函数方式实现继承</span> <span class="token comment" spellcheck="true">//利用call继承了Person</span> Person<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span>P1<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name:'</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">',age:'</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> newPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">P1</span><span class="token punctuation">(</span><span class="token string">'popo'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//name:popo,age:20</span>newPerson<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>实现硬绑定<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>bar<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span class="token comment" spellcheck="true">// 硬绑定的bar不可能再修改它的this</span>bar<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><blockquote><p>我们创建了函数bar()，并在它的内部手动调用了foo.call(obj)，因此强制把foo的this绑定到了obj。无论之后如何调用函数bar，它总会手动在obj上调用foo。这种绑定是一种显式的强制绑定，因此我们称之为硬绑定。</p></blockquote></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><ol><li>对于没有挂载在任何对象上的函数，在非严格模式下 this 就是指向 window 的</li><li>匿名函数的this永远指向window</li><li>不要根据this的英文语法角度错误理解成指向函数自身</li><li>当一个函数被调用时，会创建一个活动记录（也可以成为执行上下文），this就是这记录的一个属性。，所以this指向什么完全取决于函数在哪里被调用。</li></ol></blockquote><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><blockquote><p>根据《你不知道的JavaScript上卷》一书中写的：可以根据优先级来判断函数在某个调用位置应用的是哪条this指向规则（在箭头函数下无效）</p></blockquote><ol><li>函数是否在new中调用，如果是的话this绑定的是新创建的对象。</li><li>函数是否通过显示绑定或者硬绑定调用，如果是的话，this指向指定对象</li><li>函数是否在某个上下文中调用（隐式绑定），如果是的话，this指向那个上下文对象</li><li>如果都不是，使用默认绑定，严格模式下就指向undefined,否则绑定到全局对象。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高性能渲染十万级数据</title>
      <link href="/2019/11/13/gao-xing-neng-xuan-ran-shi-wan-ji-shu-ju/"/>
      <url>/2019/11/13/gao-xing-neng-xuan-ran-shi-wan-ji-shu-ju/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于一次性插入大量数据的情况，一般有两种做法：</p><ol><li>时间分片</li><li>虚拟列表</li></ol><p>接下来将分别介绍如何使用’时间分片‘及’虚拟列表‘的方式来渲染大量数据</p><h2 id="时间分片"><a href="#时间分片" class="headerlink" title="时间分片"></a>时间分片</h2><h3 id="一次性渲染（最容易想到的极其粗暴的方法）"><a href="#一次性渲染（最容易想到的极其粗暴的方法）" class="headerlink" title="一次性渲染（最容易想到的极其粗暴的方法）"></a>一次性渲染（最容易想到的极其粗暴的方法）</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 记录任务开始时间</span>    <span class="token keyword">let</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 插入十万条数据</span>    <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token number">100000</span>    <span class="token comment" spellcheck="true">// 获取容器</span>    <span class="token keyword">let</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//将数据插入到容器中</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>total<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span>        li<span class="token punctuation">.</span>innerText <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>total        ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'js运行时间:'</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> now<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 162ms</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'总运行时间：'</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> now<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2887ms</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>简单说明一下，为何两次console.log的结果时间差异巨大，并且是如何简单统计JS运行时间和总渲染时间：</p><ul><li>在JS的事件队列Event Loop中，当JS引擎所在管理当执行栈中当事件以及所有微任务事件全部执行完后，才会触发渲染线程对页面进行渲染</li><li>第一个console.log的触发时间是中页面进行渲染之前，此时得到的间隔时间为JS运行所需要的时间</li><li>第二个console.log是放到定时器中，他的触发时间是在渲染完成，在下一次事件队列中执行的</li></ul><p>可以得出的结论：对于大量数据渲染的时候，JS运算并不是性能的瓶颈，性能的瓶颈主要在于渲染阶段</p><p><strong>关于Event Loop更多知识点可以参考：</strong><a href="https://eddie-fannie.github.io/2019/11/10/xiang-tan-javascript-de-event-loop/">详谈JavaScript的Event Loop</a></p><h3 id="使用定时器"><a href="#使用定时器" class="headerlink" title="使用定时器"></a>使用定时器</h3><p>从上面简单粗暴的例子可以看出页面的渲染耗时长是由于同时渲染大量DOM所引起的，所以我们考虑将渲染过程分批进行</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 插入十万条数据</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">100000</span><span class="token comment" spellcheck="true">//一次插入20条</span><span class="token keyword">let</span> once <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总页数</span><span class="token keyword">let</span> page <span class="token operator">=</span> total<span class="token operator">/</span>once<span class="token comment" spellcheck="true">//每条记录的索引</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//循环加载数据</span><span class="token keyword">function</span> <span class="token function">loop</span><span class="token punctuation">(</span>curTotal<span class="token punctuation">,</span>curIndex<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">if</span><span class="token punctuation">(</span>curTotal<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//每页多少条</span> <span class="token keyword">let</span> pageCount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>curTotal<span class="token punctuation">,</span> once<span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pageCount<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">let</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span>        li<span class="token punctuation">.</span>innerText <span class="token operator">=</span> curIndex <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>total<span class="token punctuation">)</span>        ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token function">loop</span><span class="token punctuation">(</span>curTotal <span class="token operator">-</span> pageCount<span class="token punctuation">,</span>curIndex<span class="token operator">+</span>pageCount<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token function">loop</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span>index<span class="token punctuation">)</span></code></pre><p><img src="/images/xuanran.gif" alt=""><br>我们可以看到页面加载速度变快了，但当我们快速滚动页面的时候，会发现页面出现闪屏或白屏的现象。</p><h4 id="为什么会出现闪屏现象"><a href="#为什么会出现闪屏现象" class="headerlink" title="为什么会出现闪屏现象"></a>为什么会出现闪屏现象</h4><p>首先理清一个概念：FPS表示的是每秒钟画面更新次数，我们平时所看到的连续画面都是由一幅幅静止画面组成的，每幅画面为一帧，FPS是描述帧变化速度的物理量。<br>大多数电脑显示器的刷新频率是60HZ，大概相当于每秒钟重绘60次，这个值受设定受屏幕分辨率，屏幕尺寸和显卡的影响。所以当对着电脑屏幕什么都不做的情况下，大多数显示器会以每秒60次的频率不断更新屏幕上的图像。</p><p><strong>为什么感受不到这个变化？</strong><br>那是因为人的眼睛有视觉停留效应，即前一副画面留在大脑的印象还没消失，紧接着后一副画面就跟上来了。</p><h4 id="setTimeout和闪屏现象"><a href="#setTimeout和闪屏现象" class="headerlink" title="setTimeout和闪屏现象"></a>setTimeout和闪屏现象</h4><ul><li>setTimeout的执行时间并不是确定。在JS中，setTimeout任务被放进事件队列中，只有主线程执行完才会去检查事件队列中的任务是否需要执行，因此setTimeout的实际执行时间可能会比其设定的时间晚一些。</li><li>刷新频率受屏幕分辨率和屏幕尺寸的影响，因此不同设备的刷新频率可能会不同，而setTimeout只能设置一个固定时间间隔，这个时间不一定和屏幕的刷新时间相同。<br>以上两种情况导致setTimeout的执行步调和屏幕的刷新步调不一致。</li></ul><h3 id="使用requestAnimationFrame"><a href="#使用requestAnimationFrame" class="headerlink" title="使用requestAnimationFrame"></a>使用requestAnimationFrame</h3><p>与setTimeout相比，它最大的优势是由系统来决定回调函数的执行时机，可以保证回调函数在屏幕每一次的刷新间隔只被执行一次，这样就不会引起丢帧现象。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 插入十万条数据</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">100000</span><span class="token comment" spellcheck="true">//一次插入20条</span><span class="token keyword">let</span> once <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总页数</span><span class="token keyword">let</span> page <span class="token operator">=</span> total<span class="token operator">/</span>once<span class="token comment" spellcheck="true">//每条记录的索引</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//循环加载数据</span><span class="token keyword">function</span> <span class="token function">loop</span><span class="token punctuation">(</span>curTotal<span class="token punctuation">,</span>curIndex<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">if</span><span class="token punctuation">(</span>curTotal<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//每页多少条</span> <span class="token keyword">let</span> pageCount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>curTotal<span class="token punctuation">,</span> once<span class="token punctuation">)</span>  window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pageCount<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">let</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span>        li<span class="token punctuation">.</span>innerText <span class="token operator">=</span> curIndex <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>total<span class="token punctuation">)</span>        ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token function">loop</span><span class="token punctuation">(</span>curTotal <span class="token operator">-</span> pageCount<span class="token punctuation">,</span>curIndex<span class="token operator">+</span>pageCount<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token function">loop</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span>index<span class="token punctuation">)</span></code></pre><h3 id="使用-DocumentFragment"><a href="#使用-DocumentFragment" class="headerlink" title="使用 DocumentFragment"></a>使用 DocumentFragment</h3><blockquote><p>DocumentFragment,文档片段接口，表示一个没有父级文件的最小文档对象。被作为一个轻量级版的Document使用，用于存储已排好版的或尚未打理好格式的XML片段。最大区别是因为DocumentFragment不是真实DOM树的一部分，它的变化不会触发DOM树的重新渲染，且不会导致性能问题。<br> 可以使用document.createDocumentFragment方法或者构造函数来创建一个空的DocumentFragment</p></blockquote><p>从上述说明中可以得知DocumentFragments是Dom节点，但并不是DOM树的一部分，可以认为是存在内存中的，所以将子元素插入到文档片段时不会引起页面回流。</p><p>当append元素到document中时，被append进去的元素的样式表的计算是同步发生的，此时调用getComputedStyle可以得到样式的计算值。而append元素到documentFragment中时，不会计算元素的样式表，所以性能更优。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 插入十万条数据</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">100000</span><span class="token comment" spellcheck="true">//一次插入20条</span><span class="token keyword">let</span> once <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总页数</span><span class="token keyword">let</span> page <span class="token operator">=</span> total<span class="token operator">/</span>once<span class="token comment" spellcheck="true">//每条记录的索引</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//循环加载数据</span><span class="token keyword">function</span> <span class="token function">loop</span><span class="token punctuation">(</span>curTotal<span class="token punctuation">,</span>curIndex<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">if</span><span class="token punctuation">(</span>curTotal<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//每页多少条</span> <span class="token keyword">let</span> pageCount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>curTotal<span class="token punctuation">,</span> once<span class="token punctuation">)</span>  window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pageCount<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">let</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span>        li<span class="token punctuation">.</span>innerText <span class="token operator">=</span> curIndex <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>total<span class="token punctuation">)</span>        fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span>        <span class="token function">loop</span><span class="token punctuation">(</span>curTotal <span class="token operator">-</span> pageCount<span class="token punctuation">,</span>curIndex<span class="token operator">+</span>pageCount<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token function">loop</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span>index<span class="token punctuation">)</span></code></pre><h2 id="虚拟列表"><a href="#虚拟列表" class="headerlink" title="虚拟列表"></a>虚拟列表</h2><p><strong>对于复杂DOM的情况，一般会用虚拟列表的方式来实现</strong></p><blockquote><p>根据容器元素的高度以及列表项元素的高度来显示长列表数据中的某一个部分，而不是去完整地渲染长列表，以提高滚动的性能。虚拟列表是一种根据滚动容器元素的可视区域来渲染长列表数据中某一个部分数据的技术。</p></blockquote><p><strong>虚拟列表指的就是【可视区域渲染】的列表</strong></p><ul><li>滚动容器元素：一般情况下滚动容器元素是window对象。</li><li>可滚动区域：滚动容器元素的内部内容区域。可滚动区域当前的具体高度可以通过滚动容器元素的scrollHeight属性获取。</li><li>可视区域：滚动容器元素的视觉可见区域。如果容器元素是window对象，可视区域就是浏览器的视口大小；如果容器元素是某个div元素，高度为300，右侧有滚动条可以滚动，那么视觉可见的区域就是可视区域。</li></ul><p>实现虚拟列表就是在处理用户滚动时，改变列表在可视区域的渲染部分，具体步骤：</p><ol><li>计算当前可视区域的起始数据的startIndex</li><li>计算当前可视区域结束数据的endIndex</li><li>计算当前可见区域的数据，并渲染到页面中。</li><li>计算startIndex对应的数据在整个列表中的偏移位置startOffset，并设置到列表上</li><li>计算endIndex对应的数据相对于可滚动区域最底部的偏移位置endOffset，并设置到列表上。<br>可以参考下图：<br><img src="/images/xuniliebiao.png" alt=""></li></ol><p>可以封装一个VirtualList.vue虚拟列表组件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token string">"list"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"infinite-list-container"</span> @scroll<span class="token operator">=</span><span class="token string">"scrollEvent($event)"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"infinite-list-phantom"</span> <span class="token punctuation">:</span>style<span class="token operator">=</span><span class="token string">"{ height: listHeight + 'px' }"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"infinite-list"</span> <span class="token punctuation">:</span>style<span class="token operator">=</span><span class="token string">"{ transform: getTransform }"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token string">"items"</span>        <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"infinite-list-item"</span>        v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in visibleData"</span>        <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"item.id"</span>        <span class="token punctuation">:</span>style<span class="token operator">=</span><span class="token string">"{ height: itemSize + 'px',lineHeight: itemSize + 'px' }"</span>      <span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> item<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span><span class="token string">'VirtualList'</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//所有列表数据</span>    listData<span class="token punctuation">:</span><span class="token punctuation">{</span>      type<span class="token punctuation">:</span>Array<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//每项高度</span>    itemSize<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token number">200</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//列表总高度</span>    <span class="token function">listHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listData<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>itemSize<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//可显示的列表项数</span>    <span class="token function">visibleCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>screenHeight <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>itemSize<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//偏移量对应的style</span>    <span class="token function">getTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`translate3d(0,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>startOffset<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px,0)`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//获取真实显示列表数据</span>    <span class="token function">visibleData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listData<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>start<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>end<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>listData<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>screenHeight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>visibleCount<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//可视区域高度</span>      screenHeight<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//偏移量</span>      startOffset<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//起始索引</span>      start<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//结束索引</span>      end<span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">scrollEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//当前滚动位置</span>      <span class="token keyword">let</span> scrollTop <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>list<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//此时的开始索引</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>scrollTop <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>itemSize<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//此时的结束索引</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>visibleCount<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//此时的偏移量</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>startOffset <span class="token operator">=</span> scrollTop <span class="token operator">-</span> <span class="token punctuation">(</span>scrollTop <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>itemSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token punctuation">.</span>infinite<span class="token operator">-</span>list<span class="token operator">-</span>container <span class="token punctuation">{</span>  height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>  overflow<span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  position<span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token operator">-</span>webkit<span class="token operator">-</span>overflow<span class="token operator">-</span>scrolling<span class="token punctuation">:</span> touch<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>infinite<span class="token operator">-</span>list<span class="token operator">-</span>phantom <span class="token punctuation">{</span>  position<span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  left<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  top<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  right<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  z<span class="token operator">-</span>index<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>infinite<span class="token operator">-</span>list <span class="token punctuation">{</span>  left<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  right<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  top<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  position<span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  text<span class="token operator">-</span>align<span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>infinite<span class="token operator">-</span>list<span class="token operator">-</span>item <span class="token punctuation">{</span>  padding<span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  color<span class="token punctuation">:</span> #<span class="token number">555</span><span class="token punctuation">;</span>  box<span class="token operator">-</span>sizing<span class="token punctuation">:</span> border<span class="token operator">-</span>box<span class="token punctuation">;</span>  border<span class="token operator">-</span>bottom<span class="token punctuation">:</span> 1px solid #<span class="token number">999</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><p>在全局组件中引入</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>VirtualList <span class="token punctuation">:</span>listData<span class="token operator">=</span><span class="token string">"data"</span> <span class="token punctuation">:</span>itemSize<span class="token operator">=</span><span class="token string">"100"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> VirtualList <span class="token keyword">from</span> <span class="token string">"./components/VirtualList"</span><span class="token punctuation">;</span><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  d<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> i<span class="token punctuation">,</span> value<span class="token punctuation">:</span> i <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"App"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      data<span class="token punctuation">:</span> d    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    VirtualList  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span>html<span class="token punctuation">{</span>  height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span><span class="token punctuation">}</span>body<span class="token punctuation">{</span>  height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>  margin<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>#app<span class="token punctuation">{</span>  height<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间分片 </tag>
            
            <tag> 虚拟列表 </tag>
            
            <tag> 超高数量级数据量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/11/12/hello-world/"/>
      <url>/2019/11/12/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>详谈Javascript的Event loop</title>
      <link href="/2019/11/10/xiang-tan-javascript-de-event-loop/"/>
      <url>/2019/11/10/xiang-tan-javascript-de-event-loop/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p>JS是单线程的，JS是通过事件队列（Event Loop）的方式来实现异步回调的。单线程的JS为什么拥有异步的能力，接下是从进程，线程的角度来解释这个问题。</p><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>计算机的核心CPU就好像一个工厂时刻运行中，工厂的电力有限一次只能供给一个车间使用，也就是说单个CPU一次只能运行一个任务。</p><p>进程就好比工厂的车间，进程之间相互独立，任一时刻CPU总是运行一个进程，其他进程处于非运行状态。CPU使用时间片轮转进度算法来运行多个进程。</p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>一个车间里，可以有很多工人，共享车间所有的资源，共同协同完成一个任务。线程就好比车间里的工人，一个进程可以包括多个线程，多个线程共享进程资源。</p><h3 id="CPU，进程，线程三者关系"><a href="#CPU，进程，线程三者关系" class="headerlink" title="CPU，进程，线程三者关系"></a>CPU，进程，线程三者关系</h3><ul><li>进程是CPU资源分配的最小单位（是能拥有资源和独立运行的最小单位）</li><li>线程是CPU调度的最小单位（线程是建立在进程的基础上的一次程序运行单位，一个进程中可以有多个线程）</li><li>不同进程之间也可以通信，不过代价比较大</li><li>单线程与多线程都是指在一个进程内的单和多</li></ul><h3 id="浏览器是多进程的"><a href="#浏览器是多进程的" class="headerlink" title="浏览器是多进程的"></a>浏览器是多进程的</h3><p>对于计算机来说，每一个应用程序都是一个进程，而每一个应用程序都会分别有很多的功能模块，这些功能模块实际上是通过子进程来实现的。对于这种子进程的扩展方式，我们可以称这个应用程序是多进程的。</p><p>对于浏览器来说，浏览器是多进程的，每一个tab页就是一个独立的进程。</p><h3 id="浏览器包含了哪些进程"><a href="#浏览器包含了哪些进程" class="headerlink" title="浏览器包含了哪些进程"></a>浏览器包含了哪些进程</h3><ul><li>主进程<ul><li>协调控制其他子进程（创建，销毁）</li><li>浏览器界面显示，用户交互，前进，后退，收藏</li><li>将渲染进程得到的内存中的Bitmap，绘制到用户界面上</li><li>处理不可见操作，网络请求，文件访问等</li></ul></li><li>第三方插件进程<ul><li>每一种类型的插件对应一个进程，仅当使用该插件时才会创建</li></ul></li><li>GPU进程<ul><li>用于3D绘制等</li></ul></li><li>渲染进程，就是我们说的浏览器内核（前端操作最重要的进程）<ul><li>负责页面渲染，脚本执行，事件处理等</li><li>每个tab页就是一个渲染进程</li></ul></li></ul><h3 id="浏览器内核（Render进程）"><a href="#浏览器内核（Render进程）" class="headerlink" title="浏览器内核（Render进程）"></a>浏览器内核（Render进程）</h3><p>该进程也同样是多线程的，包含了以下线程</p><ul><li>GUI渲染线程<ul><li>负责渲染页面，布局和控制</li><li>页面需要重绘和回流时，该线程就会执行</li><li>与js引擎线程互斥，防止渲染结果不可预期</li></ul></li><li>JS引擎线程<ul><li>负责处理解析和执行js脚本程序</li><li>只有一个JS引擎线程（单线程）</li><li>与GUI渲染线程互斥，防止渲染结果不可预期</li></ul></li><li>事件触发线程<ul><li>用来控制事件循环（鼠标点击，setTimeout，Ajax等）</li><li>当事件满足触发条件时，将事件放入到JS引擎所在的执行队列中</li></ul></li><li>定时触发线程<ul><li>setInterval和setTimeout所在的线程</li><li>定时任务并不是由JS引擎计时的，是由定时触发线程计时的</li><li>计时完毕，通知事件触发线程</li></ul></li><li>异步http请求线程<ul><li>浏览器有一个单独的线程用于处理AJAX请求</li><li>当请求完成时，若有回调函数，通知事件触发线程</li></ul></li></ul><h3 id="为什么GUI渲染线程和JS引擎线程互斥"><a href="#为什么GUI渲染线程和JS引擎线程互斥" class="headerlink" title="为什么GUI渲染线程和JS引擎线程互斥"></a>为什么GUI渲染线程和JS引擎线程互斥</h3><p>这是由于JS是可以操作DOM的，如果同时修改元素属性并同时渲染界面，那么渲染线程前后获得的元素就可能不一致了。</p><p>当JS引擎线程执行时GUI渲染线程就会被挂起，GUI更新则会被保存在一个队列中等待JS引擎线程空闲时立即被执行。</p><h3 id="从Event-Loop看JS的运行机制"><a href="#从Event-Loop看JS的运行机制" class="headerlink" title="从Event Loop看JS的运行机制"></a>从Event Loop看JS的运行机制</h3><ul><li>JS分为同步和异步任务</li><li>同步任务都在JS引擎线程上执行，形成一个执行栈</li><li>事件触发线程管理一个任务队列，异步任务触发条件达成，将回调事件放到任务队列中</li><li>执行栈中所有同步任务执行完毕，此时JS引擎线程空闲，系统会读取任务队列，将可运行的异步任务回调事件添加到执行栈中，开始执行</li></ul><p>我们知道不管是定时器还是网络请求代码，在这些代码执行时，本身是同步任务，而其中的回调函数才是异步任务。</p><p>当代码执行到setTimeout/setInterval时，实际上是JS引擎线程通知定时触发线程，间隔一个时间后，会触发一个回调事件，而定时触发线程在接收到这个消息后，会在等待的时间后，将回调事件放入到由事件触发线程所管理的事件队列中。</p><p>而当代码执行XHR/fetch网络请求时候，则是JS线程通知异步http请求线程</p><p>用代码来说话：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> timerCallback <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'wait one second'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> httpCallback <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get server data success'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//同步任务</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//同步任务</span><span class="token comment" spellcheck="true">//通知定时器线程JS后将timerCallback交由事件触发线程处理</span><span class="token comment" spellcheck="true">//1s后事件触发线程将该事件加入到事件队列中</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>timerCallback<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同理。。。</span>$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'www.xxx.com'</span><span class="token punctuation">,</span>httpCallback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同步任务</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span></code></pre><p>总结：</p><ul><li>JS引擎线程只执行执行栈中的事件</li><li>执行栈中的代码执行完毕，就会读取事件队列中的事件</li><li>事件队列中的回调事件，是由各自线程插入到事件队列中的</li><li>如此循环</li></ul><h3 id="宏任务，微任务（异步任务-宏任务可以有多个，微任务队列只有一个）"><a href="#宏任务，微任务（异步任务-宏任务可以有多个，微任务队列只有一个）" class="headerlink" title="宏任务，微任务（异步任务,宏任务可以有多个，微任务队列只有一个）"></a>宏任务，微任务（异步任务,宏任务可以有多个，微任务队列只有一个）</h3><h4 id="什么是宏任务"><a href="#什么是宏任务" class="headerlink" title="什么是宏任务"></a>什么是宏任务</h4><p>我们可以将每次执行栈执行的代码当作一个宏任务（包括每次从事件队列中获取一个事件回调并放到执行栈中执行),每个宏任务会从头到尾执行完毕，不会执行其他。<br>浏览器为了能够使宏任务和DOM任务有序进行，会在一个宏任务执行结果后，在下一个宏任务执行前，GUI渲染线程开始工作，对页面进行渲染。</p><blockquote><p>主代码块，setTimeout,setInterval等，都属于宏任务</p></blockquote><p><strong>第一个例子</strong></p><pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">"background:black"</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">"background:red"</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">"background:blue"</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">"background:grey"</span></code></pre><p>我们可以将这段代码放到浏览器的控制台执行一下，可以看到效果:<br><img src="/images/event_loop.gif" alt=""></p><p>我们会看到页面背景在瞬间变成灰色，以上代码属于一次宏任务，所以全部执行完才会触发页面渲染，渲染时GUI线程会将所有的UI改动优化合并，所以视觉效果上，只会看到页面变成灰色。</p><p><strong>第二个例子</strong></p><pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token operator">=</span><span class="token string">"background:blue"</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style <span class="token operator">=</span><span class="token string">"background:black"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p><img src="/images/3.gif" alt=""><br>我们可以看到页面先变成蓝色，再瞬间变成黑色，这是因为上面代码为两次宏任务，分别执行一次然后再触发渲染，所以两种颜色都会被渲染出来。</p><h4 id="什么是微任务"><a href="#什么是微任务" class="headerlink" title="什么是微任务"></a>什么是微任务</h4><p>我们知道宏任务结束后会执行渲染，然后执行下一个宏任务，而微任务可以理解为在当前宏任务执行后立即执行的任务。</p><blockquote><p>Promise,process,nextTick，then()等属于微任务,在微任务中process.nextTick优先级高于Promise</p></blockquote><p><strong>第一个例子</strong></p><pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token operator">=</span><span class="token string">"background:blue"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">"background:black"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><p><img src="/images/4.gif" alt=""><br>页面的背景直接变成黑色，没有经过蓝色的阶段，是因为，我们在宏任务中将背景设置为蓝色，但在进行渲染前执行了微任务，在微任务中将背景变成黑色，然后才执行的渲染</p><p><strong>第二个例子</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>上面代码共有两个setTimeout，也就是说除主代码外，共有两个宏任务，其中第一个宏任务执行中，输出1，并且创建微任务队列，所以在下一个宏任务队列执行前，先执行微任务，在微任务执行中输出3，微任务执行后，执行下次宏任务，执行中输出2.</p><p><strong>当异步任务进入栈执行时，微任务和宏任务并排进入执行队列时，先执行微任务</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>       Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//5，4，1，2，3</span></code></pre><ul><li>第一轮循环<ul><li>同样从全局任务入口，遇到宏任务setTimeout，交给异步处理模块，我们暂且记为setTimeout 1，由于等待时间为0，直接加入宏任务队列。</li><li>再次遇到宏任务setTimeout，交给异步处理模块，我们暂且记为setTimeout2,同样直接加入宏任务队列</li><li>遇到微任务then()，加入微任务队列。</li><li>直接打印日志5，所以先输出5</li></ul></li><li>第二轮循环<ul><li>栈空后，先执行微任务队列，输出4</li><li>读取宏任务队列最靠前的任务setTimeout1</li><li>先直接执行打印语句，打印日志1，又遇到微任务then(),加入微任务队列，第二轮循环结束</li></ul></li><li>第三轮循环<ul><li>先执行微任务队列中的then(),输出2</li><li>执行setTimeout2，输出3，执行完毕</li></ul></li></ul><hr><p><strong>此文章非原创，经总结他人博客内容，仅供自己学习前端，无商业用途。以下为博客参考来源：</strong><br>1.云中桥的《从多线程来看Event Loop》<a href="https://github.com/chenqf/frontEndBlog/issues/14" target="_blank" rel="noopener">https://github.com/chenqf/frontEndBlog/issues/14</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Event loop </tag>
            
            <tag> 线程 </tag>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown编辑规范</title>
      <link href="/2019/11/07/markdown-bian-ji-gui-fan/"/>
      <url>/2019/11/07/markdown-bian-ji-gui-fan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Markdown-是一种轻量级的标记语言"><a href="#Markdown-是一种轻量级的标记语言" class="headerlink" title="Markdown 是一种轻量级的标记语言"></a>Markdown 是一种轻量级的标记语言</h1><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，可以使普通文本内容具有一定的格式。后缀名是‘.md’</p><h2 id="Markdown-规范展示"><a href="#Markdown-规范展示" class="headerlink" title="Markdown 规范展示"></a>Markdown 规范展示</h2><pre><code># 标题H1## 标题H2### 标题H3#### 标题H4##### 标题H5###### 标题H6&lt;s&gt;删除线&lt;/s&gt;*斜体字***粗体*****粗斜体***&lt;sub&gt;&lt;/sub&gt; 上标  &lt;sup&gt;&lt;/sup&gt; 下标</code></pre><h4 id="锚点与链接-Links"><a href="#锚点与链接-Links" class="headerlink" title="锚点与链接 Links"></a>锚点与链接 Links</h4><pre><code>[普通链接](https://www.mdeditor.com/)[普通链接带标题](https://www.mdeditor.com/ "普通链接带标题")直接链接：&lt;https://www.mdeditor.com&gt;</code></pre><h4 id="Js代码"><a href="#Js代码" class="headerlink" title="Js代码"></a>Js代码</h4><pre><code>```javascriptfunction test() {// ```后面直接跟javascript    console.log("markdown")}</code></pre><h4 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mate</span> <span class="token attr-name">charest</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Editor.md, Markdown, Editor<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Hello world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">body</span><span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">14</span>px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#444</span><span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Microsoft Yahei"</span>, Tahoma, <span class="token string">"Hiragino Sans GB"</span>, Arial<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#fff</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token selector">ul</span><span class="token punctuation">{</span><span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token selector">img</span><span class="token punctuation">{</span><span class="token property">border</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-xxl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-green<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Plain text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><pre><code>![](图片链接)</code></pre><h4 id="Emoji表情-smile"><a href="#Emoji表情-smile" class="headerlink" title="Emoji表情 :smile:"></a>Emoji表情 :smile:</h4><p>:pig :</p><pre><code>:smile:</code></pre><p><strong>其他规范可以参考<a href="https://www.mdeditor.com/" target="_blank" rel="noopener">mdeditor官网</a></strong></p><h3 id="恭喜你看完了这篇文章，听一首歌放松放松"><a href="#恭喜你看完了这篇文章，听一首歌放松放松" class="headerlink" title="恭喜你看完了这篇文章，听一首歌放松放松"></a>恭喜你看完了这篇文章，听一首歌放松放松</h3><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=530715220&amp;auto=1&amp;height=66"></iframe><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型&amp;原型链</title>
      <link href="/2019/11/06/yuanxing/"/>
      <url>/2019/11/06/yuanxing/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>我们可以通过new的方式创建一个对象</p><blockquote><p>var obj = new Object();</p></blockquote><p>也可以通过对象字面量的形式创建一个简单的对象</p><blockquote><p>var obj = {}</p></blockquote><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>工厂模式就是我们提供一个模子，然后通过这个模子复制我们需要的对象。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> createPerson <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 声明一个中间对象，该对象为工厂模式的模子</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//依次添加我们需要的属性与方法</span>o<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>o<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建两个实例</span><span class="token keyword">var</span> perTom <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">var</span> perJake <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">'jake'</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span></code></pre><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>在JavaScript中new关键字可以让一个函数变得与众不同。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//window</span> <span class="token keyword">new</span> <span class="token class-name">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//demo</span></code></pre><p>使用new之后，函数内部发生了一些变化，让this指向改变。那么new关键字到底做了什么？</p><blockquote><p>使用new来调用函数，或者说发生构造函数调用时，会自动执行下面的操作。<br>1．创建（或者说构造）一个全新的对象。<br>2．这个新对象会被执行[[Prototype]]连接。<br>3．这个新对象会绑定到函数调用的this。<br>4．如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 原型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原型 </tag>
            
            <tag> js </tag>
            
            <tag> 原型链 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
