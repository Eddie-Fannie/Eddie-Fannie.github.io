<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>高性能渲染十万级数据</title>
      <link href="/2019/11/13/gao-xing-neng-xuan-ran-shi-wan-ji-shu-ju/"/>
      <url>/2019/11/13/gao-xing-neng-xuan-ran-shi-wan-ji-shu-ju/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>对于一次性插入大量数据的情况，一般有两种做法：</p><ol><li>时间分片</li><li>虚拟列表</li></ol><p>接下来将分别介绍如何使用’时间分片‘及’虚拟列表‘的方式来渲染大量数据</p><h3 id="一次性渲染（最容易想到的极其粗暴的方法）"><a href="#一次性渲染（最容易想到的极其粗暴的方法）" class="headerlink" title="一次性渲染（最容易想到的极其粗暴的方法）"></a>一次性渲染（最容易想到的极其粗暴的方法）</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 记录任务开始时间</span>    <span class="token keyword">let</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 插入十万条数据</span>    <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token number">100000</span>    <span class="token comment" spellcheck="true">// 获取容器</span>    <span class="token keyword">let</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//将数据插入到容器中</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>total<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span>        li<span class="token punctuation">.</span>innerText <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>total        ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'js运行时间:'</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> now<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 162ms</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'总运行时间：'</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> now<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2887ms</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>简单说明一下，为何两次console.log的结果时间差异巨大，并且是如何简单统计JS运行时间和总渲染时间：</p><ul><li>在JS的事件队列Event Loop中，当JS引擎所在管理当执行栈中当事件以及所有微任务事件全部执行完后，才会触发渲染线程对页面进行渲染</li><li>第一个console.log的触发时间是中页面进行渲染之前，此时得到的间隔时间为JS运行所需要的时间</li><li>第二个console.log是放到定时器中，他的触发时间是在渲染完成，在下一次事件队列中执行的</li></ul><p>可以得出的结论：对于大量数据渲染的时候，JS运算并不是性能的瓶颈，性能的瓶颈主要在于渲染阶段</p><p><strong>关于Event Loop更多知识点可以参考：<a href=""></a></strong></p><h3 id="使用定时器"><a href="#使用定时器" class="headerlink" title="使用定时器"></a>使用定时器</h3><p>从上面简单粗暴的例子可以看出页面的渲染耗时长是由于同时渲染大量DOM所引起的，所以我们考虑将渲染过程分批进行</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 插入十万条数据</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">100000</span><span class="token comment" spellcheck="true">//一次插入20条</span><span class="token keyword">let</span> once <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总页数</span><span class="token keyword">let</span> page <span class="token operator">=</span> total<span class="token operator">/</span>once<span class="token comment" spellcheck="true">//每条记录的索引</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//循环加载数据</span><span class="token keyword">function</span> <span class="token function">loop</span><span class="token punctuation">(</span>curTotal<span class="token punctuation">,</span>curIndex<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">if</span><span class="token punctuation">(</span>curTotal<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//每页多少条</span> <span class="token keyword">let</span> pageCount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>curTotal<span class="token punctuation">,</span> once<span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pageCount<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">let</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span>        li<span class="token punctuation">.</span>innerText <span class="token operator">=</span> curIndex <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>total<span class="token punctuation">)</span>        ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token function">loop</span><span class="token punctuation">(</span>curTotal <span class="token operator">-</span> pageCount<span class="token punctuation">,</span>curIndex<span class="token operator">+</span>pageCount<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token function">loop</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span>index<span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间分片 </tag>
            
            <tag> 虚拟列表 </tag>
            
            <tag> 超高数量级数据量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/11/12/hello-world/"/>
      <url>/2019/11/12/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>详谈Javascript的Event loop</title>
      <link href="/2019/11/10/xiang-tan-javascript-de-event-loop/"/>
      <url>/2019/11/10/xiang-tan-javascript-de-event-loop/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p>JS是单线程的，JS是通过事件队列（Event Loop）的方式来实现异步回调的。单线程的JS为什么拥有异步的能力，接下是从进程，线程的角度来解释这个问题。</p><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>计算机的核心CPU就好像一个工厂时刻运行中，工厂的电力有限一次只能供给一个车间使用，也就是说单个CPU一次只能运行一个任务。</p><p>进程就好比工厂的车间，进程之间相互独立，任一时刻CPU总是运行一个进程，其他进程处于非运行状态。CPU使用时间片轮转进度算法来运行多个进程。</p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>一个车间里，可以有很多工人，共享车间所有的资源，共同协同完成一个任务。线程就好比车间里的工人，一个进程可以包括多个线程，多个线程共享进程资源。</p><h3 id="CPU，进程，线程三者关系"><a href="#CPU，进程，线程三者关系" class="headerlink" title="CPU，进程，线程三者关系"></a>CPU，进程，线程三者关系</h3><ul><li>进程是CPU资源分配的最小单位（是能拥有资源和独立运行的最小单位）</li><li>线程是CPU调度的最小单位（线程是建立在进程的基础上的一次程序运行单位，一个进程中可以有多个线程）</li><li>不同进程之间也可以通信，不过代价比较大</li><li>单线程与多线程都是指在一个进程内的单和多</li></ul><h3 id="浏览器是多进程的"><a href="#浏览器是多进程的" class="headerlink" title="浏览器是多进程的"></a>浏览器是多进程的</h3><p>对于计算机来说，每一个应用程序都是一个进程，而每一个应用程序都会分别有很多的功能模块，这些功能模块实际上是通过子进程来实现的。对于这种子进程的扩展方式，我们可以称这个应用程序是多进程的。</p><p>对于浏览器来说，浏览器是多进程的，每一个tab页就是一个独立的进程。</p><h3 id="浏览器包含了哪些进程"><a href="#浏览器包含了哪些进程" class="headerlink" title="浏览器包含了哪些进程"></a>浏览器包含了哪些进程</h3><ul><li>主进程<ul><li>协调控制其他子进程（创建，销毁）</li><li>浏览器界面显示，用户交互，前进，后退，收藏</li><li>将渲染进程得到的内存中的Bitmap，绘制到用户界面上</li><li>处理不可见操作，网络请求，文件访问等</li></ul></li><li>第三方插件进程<ul><li>每一种类型的插件对应一个进程，仅当使用该插件时才会创建</li></ul></li><li>GPU进程<ul><li>用于3D绘制等</li></ul></li><li>渲染进程，就是我们说的浏览器内核（前端操作最重要的进程）<ul><li>负责页面渲染，脚本执行，事件处理等</li><li>每个tab页就是一个渲染进程</li></ul></li></ul><h3 id="浏览器内核（渲染进程）"><a href="#浏览器内核（渲染进程）" class="headerlink" title="浏览器内核（渲染进程）"></a>浏览器内核（渲染进程）</h3><p>该进程也同样是多线程的，包含了以下线程</p><ul><li>GUI渲染线程<ul><li>负责渲染页面，布局和控制</li><li>页面需要重绘和回流时，该线程就会执行</li><li>与js引擎线程互斥，防止渲染结果不可预期</li></ul></li><li>JS引擎线程<ul><li>负责处理解析和执行js脚本程序</li><li>只有一个JS引擎线程（单线程）</li><li>与GUI渲染线程互斥，防止渲染结果不可预期</li></ul></li><li>事件触发线程<ul><li>用来控制事件循环（鼠标点击，setTimeout，Ajax等）</li><li>当事件满足触发条件时，将事件放入到JS引擎所在的执行队列中</li></ul></li><li>定时触发线程<ul><li>setInterval和setTimeout所在的线程</li><li>定时任务并不是由JS引擎计时的，是由定时触发线程计时的</li><li>计时完毕，通知事件触发线程</li></ul></li><li>异步http请求线程<ul><li>浏览器有一个单独的线程用于处理AJAX请求</li><li>当请求完成时，若有回调函数，通知事件触发线程</li></ul></li></ul><h3 id="为什么GUI渲染线程和JS引擎线程互斥"><a href="#为什么GUI渲染线程和JS引擎线程互斥" class="headerlink" title="为什么GUI渲染线程和JS引擎线程互斥"></a>为什么GUI渲染线程和JS引擎线程互斥</h3><p>这是由于JS是可以操作DOM的，如果同时修改元素属性并同时渲染界面，那么渲染线程前后获得的元素就可能不一致了。</p><p>当JS引擎线程执行时GUI渲染线程就会被挂起，GUI更新则会被保存在一个队列中等待JS引擎线程空闲时立即被执行。</p><h3 id="从Event-Loop看JS的运行机制"><a href="#从Event-Loop看JS的运行机制" class="headerlink" title="从Event Loop看JS的运行机制"></a>从Event Loop看JS的运行机制</h3><ul><li>JS分为同步和异步任务</li><li>同步任务都在JS引擎线程上执行，形成一个执行栈</li><li>事件触发线程管理一个任务队列，异步任务触发条件达成，将回调事件放到任务队列中</li><li>执行栈中所有同步任务执行完毕，此时JS引擎线程空闲，系统会读取任务队列，将可运行的异步任务回调事件添加到执行栈中，开始执行</li></ul><p>我们知道不管是定时器还是网络请求代码，在这些代码执行时，本身是同步任务，而其中的回调函数才是异步任务。</p><p>当代码执行到setTimeout/setInterval时，实际上是JS引擎线程通知定时触发线程，间隔一个时间后，会触发一个回调事件，而定时触发线程在接收到这个消息后，会在等待的时间后，将回调事件放入到由事件触发线程所管理的事件队列中。</p><p>而当代码执行XHR/fetch网络请求时候，则是JS线程通知异步http请求线程</p><p>用代码来说话：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> timerCallback <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'wait one second'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> httpCallback <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get server data success'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//同步任务</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//同步任务</span><span class="token comment" spellcheck="true">//通知定时器线程JS后将timerCallback交由事件触发线程处理</span><span class="token comment" spellcheck="true">//1s后事件触发线程将该事件加入到事件队列中</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>timerCallback<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同理。。。</span>$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'www.xxx.com'</span><span class="token punctuation">,</span>httpCallback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同步任务</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span></code></pre><p>总结：</p><ul><li>JS引擎线程只执行执行栈中的事件</li><li>执行栈中的代码执行完毕，就会读取事件队列中的事件</li><li>事件队列中的回调事件，是由各自线程插入到事件队列中的</li><li>如此循环</li></ul><hr><p><strong>此文章非原创，经总结他人博客内容，仅供自己学习前端，无商业用途。以下为博客参考来源：</strong><br>1.云中桥的《从多线程来看Event Loop》<a href="https://github.com/chenqf/frontEndBlog/issues/14" target="_blank" rel="noopener">https://github.com/chenqf/frontEndBlog/issues/14</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Event loop </tag>
            
            <tag> 线程 </tag>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown编辑规范</title>
      <link href="/2019/11/07/markdown-bian-ji-gui-fan/"/>
      <url>/2019/11/07/markdown-bian-ji-gui-fan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Markdown-是一种轻量级的标记语言"><a href="#Markdown-是一种轻量级的标记语言" class="headerlink" title="Markdown 是一种轻量级的标记语言"></a>Markdown 是一种轻量级的标记语言</h1><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，可以使普通文本内容具有一定的格式。后缀名是‘.md’</p><h2 id="Markdown-规范展示"><a href="#Markdown-规范展示" class="headerlink" title="Markdown 规范展示"></a>Markdown 规范展示</h2><pre><code># 标题H1## 标题H2### 标题H3#### 标题H4##### 标题H5###### 标题H6&lt;s&gt;删除线&lt;/s&gt;*斜体字***粗体*****粗斜体***&lt;sub&gt;&lt;/sub&gt; 上标  &lt;sup&gt;&lt;/sup&gt; 下标</code></pre><h4 id="锚点与链接-Links"><a href="#锚点与链接-Links" class="headerlink" title="锚点与链接 Links"></a>锚点与链接 Links</h4><pre><code>[普通链接](https://www.mdeditor.com/)[普通链接带标题](https://www.mdeditor.com/ "普通链接带标题")直接链接：&lt;https://www.mdeditor.com&gt;</code></pre><h4 id="Js代码"><a href="#Js代码" class="headerlink" title="Js代码"></a>Js代码</h4><pre><code>```javascriptfunction test() {// ```后面直接跟javascript    console.log("markdown")}</code></pre><h4 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mate</span> <span class="token attr-name">charest</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Editor.md, Markdown, Editor<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Hello world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">body</span><span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">14</span>px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#444</span><span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Microsoft Yahei"</span>, Tahoma, <span class="token string">"Hiragino Sans GB"</span>, Arial<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#fff</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token selector">ul</span><span class="token punctuation">{</span><span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token selector">img</span><span class="token punctuation">{</span><span class="token property">border</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-xxl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-green<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Plain text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><pre><code>[![](图片链接)]</code></pre><h4 id="Emoji表情-smile"><a href="#Emoji表情-smile" class="headerlink" title="Emoji表情 :smile:"></a>Emoji表情 :smile:</h4><p>:pig :</p><pre><code>:smile:</code></pre><p><strong>其他规范可以参考<a href="https://www.mdeditor.com/" target="_blank" rel="noopener">mdeditor官网</a></strong></p><h3 id="恭喜你看完了这篇文章，听一首歌放松放松"><a href="#恭喜你看完了这篇文章，听一首歌放松放松" class="headerlink" title="恭喜你看完了这篇文章，听一首歌放松放松"></a>恭喜你看完了这篇文章，听一首歌放松放松</h3><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=530715220&amp;auto=1&amp;height=66"></iframe><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型&amp;原型链</title>
      <link href="/2019/11/06/yuanxing/"/>
      <url>/2019/11/06/yuanxing/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h3><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=471385043&amp;auto=1&amp;height=66"></iframe><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 原型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原型 </tag>
            
            <tag> js </tag>
            
            <tag> 原型链 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
